git : 기능을 구현할때마다 버전을 만들어 관리하기 편하다. 이전버전으로 롤백도 가능

repository : 저장소
remote : 원격 상대방 아이디?
request : 요청 intput
response : 응답 output
branch : 
HEAD : 현재 브랜치 상태
work tree : 깃 디렉토리를 의미

add : 파일 추가 
commit : 백업하는 기능
fork : 원본(제작자) 저장소에서 내 아이디의 저장소로 파일을 가지고 오는것
clone : 내 로컬 컴퓨터로 파일을 가지고 오는 작업
push : 내가 작업한 파일을 깃저장소에 올리는것
pull : 원격저장소나 내 저장소에서 로컬로 파일을 가지고오는것
merge : 상대방과 내 작업물을 합치는 과정
ummerged paths : pull 받을때 수정된 파일이 같은곳을 수정해서 충돌난 파일.

깃 명령어 
git clone 깃허브주소 : 원격저장소에 저장되어 있는 파일을 복사해 현재디렉토리에 다운로드받는다.
git status : 깃의 상태를 확인한다.
git restore : 수정 내용을 다시 되돌린다.
git add . or 파일명 : 파일을 staged 에 올린다
git commit -m "메세지": 파일을 local repository에 저장하고 버전 기록
git reset HEAD^ : 해당 브랜치에 마지막에 한 커밋을 취소하는 명령어
git log : commit  내역을 확인
git pull origin 브랜치명 : 원격저장소나 내 저장소에서 로컬로 파일을 다운로드받는다.
git push origin 브랜치명 : github에 tracked 상태인 파일들을 remote된 원격저장소에 있는 브랜치명으로 업로드 한다 
git init : init 입력한 위치 안의 파일들이 git 의 관리를 받게 된다. ( 현재 위치 폴더와 깃 연동 )
git remote add origin 리파지토리주소 : 현재 디렉토리랑 깃허브 리파지토리랑 연결해준다 ( origin 은 그냥 관례상 적는다 )
git remote --v : 현재 디렉토리가 어떤 리파지토리랑 연결되어 있는가 확인 ( fecth : 파일 내려받는 주소  / push : 업로드 주소 )
git remote update : 원격 저장소에 업데이트된걸 반영해준다.
git rm --cached 파일명 : staged 에 올라간 파일을 다시 로컬로 되돌린다
git clone -b 브랜치이름 url주소 : 특정 브랜치 클론하기
git branch 브랜치명 : 새로운 브랜치를 만들어준다
git branch -a : 브랜치가 뭐뭐 있는지 보여준다.
git checkout 브런치명 : 원하는 브런치로 경로를 바꿔준다.
git fetch  : 내 깃 원격저장소 브랜치 상태를 확인한다.

-----
깃 로컬 작업 순서
1. 폴더랑 연결 init 
2. 내 리파지토리랑 연결 remote 
3. 


------
파일의 상태
tracked : staged에 올라간 파일이 commit까지 된 상태 / git 이 지속적으로 파일 변경내역을 추적 / 파일이 변경되면 다시 Untreacked 상태가 된다.
-Unmodified : 파일 수정한것이 깃에 감지되지 않은 상태
-Modified : 파일이 수정된것
-staged : 로컬 파일이 깃허브에 올라갈 준비가 된것 

Untreacked : git에 파일이 추가되어 있지 않은 파일들


